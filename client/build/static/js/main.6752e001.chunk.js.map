{"version":3,"sources":["utils/API.js","components/Form/Input.js","components/Form/FormBtn.js","pages/Recipes.js","pages/NewRecipe.js","App.js","serviceWorker.js","index.js"],"names":["API","getRecipes","axios","get","getRecipe","id","deleteRecipe","delete","saveRecipe","recipeData","post","Input","props","react_default","a","createElement","className","Object","assign","FormBtn","style","float","marginBottom","children","Recipes","state","recipes","title","cookTime","loadRecipes","then","res","_this","setState","data","catch","err","console","log","handleInputChange","event","_event$target","target","name","value","defineProperty","handleCreate","history","push","this","Paper_default","Table_default","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","map","recipe","key","_id","scope","difficulty","Component","NewRecipe","handleFormSubmit","preventDefault","Input_Input","onChange","placeholder","FormBtn_FormBtn","onClick","App","BrowserRouter","Nav","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6752e001.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n\t// Gets all recipes\r\n\tgetRecipes: function() {\r\n\t\treturn axios.get('/api/recipe');\r\n\t},\r\n\t// Gets the recipe with the given id\r\n\tgetRecipe: function(id) {\r\n\t\treturn axios.get('/api/recipe/' + id);\r\n\t},\r\n\t// Deletes the recipe with the given id\r\n\tdeleteRecipe: function(id) {\r\n\t\treturn axios.delete('/api/recipe/' + id);\r\n\t},\r\n\t// Saves a recipe to the database\r\n\tsaveRecipe: function(recipeData) {\r\n\t\treturn axios.post('/api/recipe', recipeData);\r\n\t}\r\n};","import React from \"react\";\r\n\r\nexport const Input = props => (\r\n  <div className=\"form-group\">\r\n    <input className=\"form-control\" {...props} />\r\n  </div>\r\n);","import React from \"react\";\r\n\r\nexport const FormBtn = props => (\r\n  <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\r\n    {props.children}\r\n  </button>\r\n);","import API from '../utils/API';\r\nimport { Link } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Input } from '../components/Form/Input.js';\r\nimport { FormBtn } from '../components/Form/FormBtn.js';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nclass Recipes extends Component{\r\n    state = {\r\n        recipes: [],\r\n        title: '',\r\n        cookTime: ''\r\n    };\r\n    componentDidMount() {\r\n\t\tthis.loadRecipes();\r\n    }\r\n    loadRecipes = () => {\r\n        API.getRecipes()\r\n                .then(res => this.setState({ recipes: res.data, title: '', cookTime: ''}))\r\n                .catch(err => console.log(err));\r\n    };\r\n    handleInputChange = event => {\r\n\t\tconst { name, value } = event.target;\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n    handleCreate = () => {\r\n        this.props.history.push('/add');\r\n    };\r\n    render() {\r\n        return (\r\n            <Paper>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Recipe Name:</TableCell>\r\n                            <TableCell align=\"right\">Cook Time</TableCell>\r\n                            <TableCell align=\"right\">Difficulty</TableCell>\r\n                            <TableCell align=\"right\">Rating</TableCell>\r\n                            <TableCell align=\"right\">Edit/Delete</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {this.recipes.map(recipe => (\r\n                            <TableRow key={recipe._id}>\r\n                                <TableCell scope=\"row\">{recipe.title}</TableCell>\r\n                                <TableCell align=\"right\">{recipe.cookTime}</TableCell>\r\n                                <TableCell align=\"right\">{recipe.difficulty}</TableCell>\r\n                                <TableCell align=\"right\">Rating: 5.6</TableCell>\r\n                                <TableCell align=\"right\">Work in Progress</TableCell>\r\n                            </TableRow>\r\n                            ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper>\r\n            // <button\r\n            //         //disabled={!(this.state.cookTime && this.state.title)}\r\n            //         onClick={this.handleCreate}\r\n            //         >\r\n            //         Create New\r\n            // </button>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Recipes;","import API from '../utils/API';\r\nimport { Link } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { Input } from '../components/Form/Input.js';\r\nimport { FormBtn } from '../components/Form/FormBtn.js';\r\n\r\nclass NewRecipe extends Component{\r\n    state = {\r\n        recipes: [],\r\n        title: '',\r\n        cookTime: ''\r\n    };\r\n    componentDidMount() {\r\n\t\tthis.loadRecipes();\r\n    }\r\n    loadRecipes = () => {\r\n        API.getRecipes()\r\n                .then(res => this.setState({ recipes: res.data, title: '', cookTime: ''}))\r\n                .catch(err => console.log(err));\r\n    };\r\n    handleInputChange = event => {\r\n\t\tconst { name, value } = event.target;\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        API.saveRecipe({\r\n            title: this.state.title,\r\n            cookTime: this.state.cookTime\r\n            })\r\n            .then(res => this.loadRecipes())\r\n            .catch(err => console.log(err));\r\n    };\r\n    render() {\r\n        return (\r\n        <form>\r\n            <Input \r\n                    value={this.state.title}\r\n                    onChange={this.handleInputChange}\r\n                    name=\"title\"\r\n                    placeholder=\"Title (required)\" \r\n                />\r\n            <Input\r\n                    value={this.state.cookTime}\r\n                    onChange={this.handleInputChange}\r\n                    name=\"cookTime\"\r\n                    placeholder=\"Cook Time (required)\"\r\n                />\r\n            <FormBtn\r\n                    //disabled={!(this.state.cookTime && this.state.title)}\r\n                    onClick={this.handleFormSubmit}\r\n                    >\r\n                    Submit Recipe\r\n            </FormBtn>\r\n        </form>\r\n        );\r\n    }\r\n\r\n}\r\nexport default NewRecipe;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Recipes from './pages/Recipes';\nimport NewRecipe from './pages/NewRecipe';\nimport './App.css';\nimport { Nav } from 'react-bootstrap';\n\nconst App = () => (\n\t<Router>\n\t\t<div>\n\t\t\t<Nav />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Recipes} />\n\t\t\t\t<Route exact path=\"/recipe\" component={Recipes} />\n\t\t\t\t<Route exact path=\"/add\" component={NewRecipe} />\n\t\t\t</Switch>\n\t\t</div>\n\t</Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}